{"version":3,"sources":["components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","onSubmit","this","props","getWeather","type","name","placeholder","React","Component","Weather","className","city","country","temperature","temp_max","temp_min","description","API_KEY","App","state","undefined","icon","error","e","a","async","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAceA,E,iLAVX,OACE,0BAAMC,SAAUC,KAAKC,MAAMC,YACzB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,+C,GALWC,IAAMC,WC+BVC,E,iLA5BX,OACI,yBAAKC,UAAU,iBAEpBT,KAAKC,MAAMS,MAAQ,uBAAGD,UAAU,gBAAb,SAClB,0BAAMA,UAAU,kBAAhB,IAAoCT,KAAKC,MAAMS,KAA/C,KAAwDV,KAAKC,MAAMU,QAAnE,MAIDX,KAAKC,MAAMW,aAAe,uBAAGH,UAAU,gBAAb,wBACzB,0BAAMA,UAAU,kBAAhB,IAAoCT,KAAKC,MAAMW,YAA/C,MAIDZ,KAAKC,MAAMY,UAAY,uBAAGJ,UAAU,gBAAb,gCACtB,0BAAMA,UAAU,kBAAhB,IAAoCT,KAAKC,MAAMY,SAA/C,MAA4Db,KAAKC,MAAMa,SAAvE,MAIDd,KAAKC,MAAMc,aAAe,uBAAGN,UAAU,gBAAb,gBACzB,0BAAMA,UAAU,kBAAhB,IAAoCT,KAAKC,MAAMc,YAA/C,W,GAtBkBT,IAAMC,WCCtBS,EAAU,mCA6EDC,E,2MAzEbC,MAAQ,CACNN,iBAAaO,EACbN,cAAUM,EACVL,cAAUK,EACVT,UAAMS,EACNR,aAASQ,EACTC,UAAMD,EACNJ,iBAAaI,EACbE,WAAOF,G,EAITjB,WAAa,SAAOoB,GAAP,mBAAAC,EAAAC,OAAA,uDACTF,EAAEG,iBACIf,EAAOY,EAAEI,OAAOC,SAASjB,KAAKkB,MAF3B,WAAAL,EAAA,MAGcM,MAAM,oDAAD,OAAqDnB,EAArD,kBAAmEM,EAAnE,qBAHnB,cAGHc,EAHG,kBAAAP,EAAA,MAIWO,EAASC,QAJpB,OAIHC,EAJG,OAMTC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZvB,YAAaoB,EAAKI,KAAKC,KACvBxB,SAAUmB,EAAKI,KAAKvB,SACpBC,SAAUkB,EAAKI,KAAKtB,SACpBJ,KAAMsB,EAAK5B,KACXO,QAASqB,EAAKM,IAAI3B,QAClBS,KAAMY,EAAKO,QAAQ,GAAGnB,KACtBL,YAAaiB,EAAKO,QAAQ,GAAGxB,YAC7BM,MAAO,KAfA,uC,wEAqBX,OACE,6BACI,yBAAKZ,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,+CAGF,yBAAKA,UAAU,2BACjB,kBAAC,EAAD,CAAMP,WAAcF,KAAKE,aACzB,kBAAC,EAAD,CACIU,YAAeZ,KAAKkB,MAAMN,YAC1BC,SAAab,KAAKkB,MAAML,SACxBC,SAAYd,KAAKkB,MAAMJ,SACvBJ,KAAQV,KAAKkB,MAAMR,KACnBC,QAAWX,KAAKkB,MAAMP,QACtBI,YAAef,KAAKkB,MAAMH,YAC1BK,KAAQpB,KAAKkB,MAAME,iB,GAtDrBd,IAAMC,W,YCOJiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.630302fc.chunk.js","sourcesContent":["import React from 'react';\n\nclass Form extends React.Component{\n  render(){\n    return(\n      <form onSubmit={this.props.getWeather}>\n        <input type=\"text\" name=\"city\" placeholder=\"City...\"></input>\n        <button>Submit</button>\n      </form>\n    );\n  };\n};\n\n\nexport default Form;\n","import React from 'react';\n\nclass Weather extends React.Component{\n  render(){\n\n    return(\n        <div className=\"weather__info\">\n        {\n\t \tthis.props.city && <p className=\"weather__key\"> City:\n\t \t\t<span className=\"weather__value\"> { this.props.city }, {this.props.country} </span>\n\t \t</p>\n\t }\n\t {\n\t \tthis.props.temperature && <p className=\"weather__key\"> Current Temperature:\n\t \t\t<span className=\"weather__value\"> { this.props.temperature }\t</span>\n\t \t</p>\n\t }\n\t {\n\t \tthis.props.temp_max && <p className=\"weather__key\"> Today's Max Temp | Min Temp:\n\t \t\t<span className=\"weather__value\"> { this.props.temp_max} | {this.props.temp_min} </span>\n\t \t</p>\n\t }\n\t {\n\t \tthis.props.description && <p className=\"weather__key\"> Description:\n\t \t\t<span className=\"weather__value\"> { this.props.description } </span>\n\t </p>\n\t }\n        </div>\n    );\n  };\n};\n\n\nexport default Weather;\n","import React from 'react';\nimport Form from './components/form.js'\nimport Weather from './components/weather.js'\nconst API_KEY = \"7194ee775a0fdeab9d3c86392856d1ea\";\n\nclass App extends React.Component {\n\n  state = {\n    temperature: undefined,\n    temp_max: undefined,\n    temp_min: undefined,\n    city: undefined,\n    country: undefined,\n    icon: undefined,\n    description: undefined,\n    error: undefined\n\n  };\n\n  getWeather = async (e) => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=imperial`);\n      const data  = await api_call.json();\n\n      console.log(data);\n      this.setState({\n        temperature: data.main.temp,\n        temp_max: data.main.temp_max,\n        temp_min: data.main.temp_min,\n        city: data.name,\n        country: data.sys.country,\n        icon: data.weather[0].icon,\n        description: data.weather[0].description,\n        error: \"\"\n\n      }  );\n  };\n\n  render(){\n    return(\n      <div>\n          <div className=\"wrapper\">\n            <div className=\"main\">\n              <div className=\"container\">\n                <div className=\"row\">\n                  <div className=\"col-xs-5 title-container\">\n                    <h1 >Weather Finder</h1>\n\n                  </div>\n                  <div className=\"col-xs-7 form-container\">\n                <Form getWeather = {this.getWeather}/>\n                <Weather\n                    temperature = {this.state.temperature}\n                    temp_max  = {this.state.temp_max}\n                    temp_min = {this.state.temp_min}\n                    city = {this.state.city}\n                    country = {this.state.country}\n                    description = {this.state.description}\n                    icon = {this.state.icon}\n                    />\n                    </div>\n\n\n                </div>\n              </div>\n            </div>\n          </div>\n\n      </div>\n    )\n\n    };\n};\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\nserviceWorker.unregister();\n"],"sourceRoot":""}